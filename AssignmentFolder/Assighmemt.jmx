<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.4.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Assighmemt" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="URI1" elementType="Argument">
            <stringProp name="Argument.name">URI1</stringProp>
            <stringProp name="Argument.value">dummyjson.com</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="path1" elementType="Argument">
            <stringProp name="Argument.name">path1</stringProp>
            <stringProp name="Argument.value">products</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="URI2" elementType="Argument">
            <stringProp name="Argument.name">URI2</stringProp>
            <stringProp name="Argument.value">gorest.co.in</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="Path2" elementType="Argument">
            <stringProp name="Argument.name">Path2</stringProp>
            <stringProp name="Argument.value">public/v2/todos</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath">C:\Projects\apache-jmeter-5.4.3\bin\CSVOperations.jar</stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="ThreadGroup" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
      </ThreadGroup>
      <hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="first_url" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URI1}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${path1}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="response" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="second_url" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${URI2}</stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol">http</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">${Path2}</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Response2" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
      </hashTree>
      <BeanShellPostProcessor guiclass="TestBeanGUI" testclass="BeanShellPostProcessor" testname="BeanShellPostProcessor" enabled="true">
        <boolProp name="resetInterpreter">false</boolProp>
        <stringProp name="parameters"></stringProp>
        <stringProp name="filename"></stringProp>
        <stringProp name="script">import myPackage.CSV_Operations;
//JmeterTest Test = new JmeterTest();
CSV_Operations Test = new CSV_Operations();
var ResponseBody;
//Generating file name semicolon_${File_Creation_Date}.csv
String newfilename1 = &quot;Semicolon_${__time(dd-MM-YYYY)}.csv&quot;;
// Generating file name pipes_${File_Creation_Date}.csv
String newfilename2 = &quot;Pipes_${__time(dd-MM-YYYY)}.csv&quot;;
String samplerName= &quot;${__samplerName()}&quot;;
//Generating first_url_response.csv or second_url_response.csv 
String FileName = samplerName+&quot;_response.csv&quot;;
//executiing tests for different samplers
if(samplerName.compareTo(&quot;first_url&quot;) == 0)
{
log.info(&quot;${__samplerName()}&quot;);
ResponseBody = ctx.getPreviousResult().getResponseDataAsString();
log.info(ResponseBody);
Test.ConvertJsonToCSV(ResponseBody, FileName, samplerName);
log.info(&quot;Title with Maxmimum Percentage: &quot; + Test.SortAndReturntitleForMaxPercentage(FileName, 7, 0,samplerName));
log.info(&quot;Average Percentage: &quot; + Test.FindAverage());
Test.CSVFileWithNewDelimiter(&apos;;&apos;, newfilename1, &quot;first_url_response.csv&quot;);
log.info(&quot;File with new delimiter should be created. File Name: &quot; + filename1 );
}
else if(samplerName.compareTo(&quot;second_url&quot;) == 0)
{
log.info(&quot;${__samplerName()}&quot;);
ResponseBody = ctx.getPreviousResult().getResponseDataAsString();
log.info(ResponseBody);
Test.ConvertJsonToCSV(ResponseBody, FileName, samplerName);
//2 here is column index of title of second_url_response
log.info(&quot;Title with Latest Due Date: &quot; + Test.SortAndReturntitleForLatestDueDate(FileName, 2,3, samplerName));
Test.CSVFileWithNewDelimiterForSecondURL(&apos;|&apos;,newfilename2 ,FileName );
log.info(&quot;File with new delimiter should be created.  File Name:&quot; + filename2 );
Test.CreateCustomCSV(FileName);
log.info(&quot;File with id,day_of_week,utc_offset colums should be created.&quot;);
}
else
log.info(&quot;Invalid Sampler&quot;);

/*
Test.function4(ResponseBody, &quot;First_url_response.csv&quot;);

log.info(&quot;first_url_response.csv&quot;);
String title = Test.SortandReturnTitle(&quot;first_url_response.csv&quot;,&quot;name&quot;,0,7);
log.info(&quot;Item title with Maximum Discount percentage: &quot; + title);

String newfilename = &quot;Semicolon_${__time(dd-MM-YYYY)}.csv&quot;;
Test.NewDelimiter(&apos;;&apos;, newfilename, &quot;first_url_response.csv&quot;);
*/

//vars.put(&quot;ResponseBody&quot;, ctx.getPreviousResult().getResponseDataAsString());
//log.info(&quot;Response Body Printed By Suraksha: &quot; + ResponseBody);

</stringProp>
      </BeanShellPostProcessor>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
